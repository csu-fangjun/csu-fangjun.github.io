<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on My notes</title>
    <link>https://csu-fangjun.github.io/categories/development/</link>
    <description>Recent content in Development on My notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 02 Nov 2018 11:04:50 +0800</lastBuildDate>
    
	<atom:link href="https://csu-fangjun.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Caffe Notes</title>
      <link>https://csu-fangjun.github.io/post/caffe-notes/</link>
      <pubDate>Fri, 02 Nov 2018 11:04:50 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/caffe-notes/</guid>
      <description>tools/caffe.cpp The statement ::gflags::ParseCommandLineFlags(pargc, pargv, true); changes argc. if (argc == 2) { limits the number of arguments to two. Options starting with - or -- do not contribute to the number of arguments. So the only valid argument is train, test, device_query or time. train RegisterBrewFunction(train); registers the train handler which is invoked when ./caffe train is used. Accepted options: --solver Example: --solver=models/bvlc_reference_caffenet/solver.prototxt ReadSolverParamsFromTextFileOrDie() ReadProtoFromTextFile() int fd = open(filename,</description>
    </item>
    
    <item>
      <title>Image Processing in Go</title>
      <link>https://csu-fangjun.github.io/post/image-processing-in-go/</link>
      <pubDate>Mon, 29 Oct 2018 20:06:40 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/image-processing-in-go/</guid>
      <description>The origin is the same with OpenCV and the memory layout is similar to OpenCV except that Go uses RGBA order and it might not be continuous, i.e., there will be some paddings at the end of each row.
Setup 1  go get -u github.com/disintegration/imaging   The image/color package 1 2 3  type Color interface { RGBA() (r, g, b, a uint32) }   Note that the Color interface has a function RGBA() returning four values, each of which is of type uint32.</description>
    </item>
    
    <item>
      <title>Protobuf in Go</title>
      <link>https://csu-fangjun.github.io/post/protobuf-in-go/</link>
      <pubDate>Sun, 28 Oct 2018 16:04:01 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/protobuf-in-go/</guid>
      <description>Setup 1 2 3 4 5  go get -u github.com/golang/protobuf/protoc-gen-go mkdir ~/go/src/hello mkdir ~/go/src/hello_protobuf cd ~/go/src/hello_protobuf touch hello.proto   hello.proto 1 2 3 4 5 6 7 8 9 10 11 12 13 14  syntax = &amp;#34;proto2&amp;#34;;package hello_protobuf;enum Foo { x = 1; Y = 2;};message Student { required int32 id = 1; optional int32 age = 2 [default=10]; optional string name = 3; repeated int64 grades = 4;};   Then run</description>
    </item>
    
    <item>
      <title>Errors in Go</title>
      <link>https://csu-fangjun.github.io/post/errors-in-go/</link>
      <pubDate>Sun, 28 Oct 2018 15:12:34 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/errors-in-go/</guid>
      <description>Introduction This post contains my notes for error handling in Go.
The Type: error error is a built-in interface type in Go.
It is defined as follows (you cannot find it in the source code!):
1 2 3  type error interface { Error() string }   Even if error begins with lower case, it is accessible by others just like types int, int16, etc.
The Package: errors The package errors contains 3 files:</description>
    </item>
    
    <item>
      <title>Machine Learning</title>
      <link>https://csu-fangjun.github.io/post/machine-learning/</link>
      <pubDate>Thu, 25 Oct 2018 16:13:09 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/machine-learning/</guid>
      <description>Machine Learning Papers  Support-Vector Networks  it proposes SVM with soft margin in 1995.  The use of multiple measurements in taxonomic problems  related to the famous Iris flower dataset in 1936   The EM Algorithm  first presented in the paper Maximum likelihood from incomplete data via the EM algorithm in 1977 lecture notes from cs229 EM algorithm and variants: an informal tutorial, a paper from arxiv.</description>
    </item>
    
    <item>
      <title>Data Structures and Algorithms</title>
      <link>https://csu-fangjun.github.io/post/data-structures-and-algorithms/</link>
      <pubDate>Sun, 21 Oct 2018 08:27:20 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/data-structures-and-algorithms/</guid>
      <description>Trees Binary Search Trees  BST: Binary Search Tree how to build a BST operations: search, insert, and delete an item complexity of every operation  Balanced BST  motivation to balance a binary tree also known as AVL trees, AVL stands for two people: Adelson-Velskii and Landis and was proposed in 1962 in the paper An algorithm for the organization of information also known as height balanced tree advantages: search disadvantages: insert and delete how to merge and split?</description>
    </item>
    
    <item>
      <title>Lecture Notes</title>
      <link>https://csu-fangjun.github.io/post/lecture-notes/</link>
      <pubDate>Sat, 20 Oct 2018 21:41:38 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/lecture-notes/</guid>
      <description> Data Structures and Algorithms  CMSC 420: Data Structures, 123 pages, year 2001, University of Maryland, by Prof. David Mount
 CMSC 420 Data Structures Spring 2001 CMSC 420 Data Structures, Fall Draft 2016  CS 97SI: Introduction to Programming Contests, stanford
  </description>
    </item>
    
    <item>
      <title>Libraries for Go</title>
      <link>https://csu-fangjun.github.io/post/libraries-for-go/</link>
      <pubDate>Wed, 17 Oct 2018 22:10:40 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/libraries-for-go/</guid>
      <description> This post lists some go libraries are useful for me.
There are various packages available at https://golang.org/pkg/ golang.org/x/... contains packages under development, for instance, golang.org/x/net/html. https://godoc.org provides an entry to search packages.
 awesome-go leveldb protobuf net Netstack, the TCP/IP stack in Go gonum, linear algebra in Go, see its official webpage imaging golearn, machine learning in Go ui  todo  algorithms, for learning purposes, study its code!  </description>
    </item>
    
    <item>
      <title>Learn Go Programming</title>
      <link>https://csu-fangjun.github.io/post/learning-go/</link>
      <pubDate>Tue, 16 Oct 2018 17:16:33 +0800</pubDate>
      
      <guid>https://csu-fangjun.github.io/post/learning-go/</guid>
      <description>TODO How to write hello world in go Structure of a project packages package initialization function: func init() {...} which is called automatically when it is imported by others (how many times is it called?) Visibility of variables and functions upper case (exported) vs. lower case package level, function level How to define: variables the special variable: _ the initialization value for implicit initialization, i.e., default values primitive data types</description>
    </item>
    
  </channel>
</rss>